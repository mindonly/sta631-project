#   ArXiv:Math/0509698. Retrieved from http://arxiv.org/abs/math/0509698
setwd("~/Dropbox/f2018/sta631/Project/data/2004")
teams <- subset(Teams, yearID == 2004)
# east, central, west
AL_teams <- c("BOS", "NYY", "BAL", "TBD", "TOR",
"MIN", "CHW", "CLE", "DET", "KCR",
"LAA", "OAK", "TEX", "SEA")
AL_ls  <- c(1.80, 1.77, 1.63, 1.82, 2.01,
1.80, 1.71, 1.81, 1.76, 1.80,
1.68, 1.79, 1.88, 1.76)
AL_mle <- c(1.82, 1.78, 1.66, 1.83, 1.97,
1.79, 1.73, 1.79, 1.78, 1.76,
1.71, 1.76, 1.90, 1.78)
AL_ls_hash  <- hashmap(AL_teams, AL_ls)
AL_mle_hash <- hashmap(AL_teams, AL_mle)
# east, central, west
NL_teams <- c("ATL", "PHI", "FLA", "NYM", "MTL",
"STL", "HOU", "CHC", "CIN", "PIT", "MIL",
"LAD", "SFG", "SDP", "COL", "ARI")
fit_weibull <- function(team, stat="rs", method="mle") {
team_mascot = teams$name[which(teams$franchID == team)]
# threshold, location, shift
Beta = -0.5
# shape
if (method == "mle") {
Gamma = AL_mle_hash[[team]]
} else {
Gamma = AL_ls_hash[[team]]
}
if (stat == "rs") {
rs_dataset <- paste0(team, "_rs.csv")
team_rs <- read_csv(rs_dataset)
rs <- rep(team_rs$Runs, team_rs$Games)
RS = mean(rs)
# scale (runs scored)
Alpha = (RS - Beta) / (gamma(1 + 1/Gamma))
df_stat <- data.frame(rs)
aes_stat <- rs
x_lab <- "runs scored"
} else {
ra_dataset <- paste0(team, "_ra.csv")
team_ra <- read_csv(ra_dataset)
ra <- rep(team_ra$Runs, team_ra$Games)
RA = mean(ra)
# scale (runs against)
Alpha = (RA - Beta) / (gamma(1 + 1/Gamma))
df_stat <- data.frame(ra)
aes_stat <- ra
x_lab <- "runs allowed"
}
n_games = 162
bw = 1
p <- ggplot(df_stat, aes(aes_stat)) +
ggtitle(paste("2004", team_mascot)) +
geom_histogram(binwidth = bw, col="blue", fill="grey") +
xlim(c(-0.5, 20)) +
xlab(x_lab) +
ylab("count") +
scale_y_continuous(breaks = scales::pretty_breaks(n = 10)) +
stat_function(
fun = function(x)
n_games * dweibull3(x, scale=Alpha, thres=Beta, shape=Gamma), color='red'
)
print(c(team, stat, Gamma, method))
return(p)
}
twofit <- function(team1, team2) {
p1 <- fit_weibull(team1, "rs")
p2 <- fit_weibull(team1, "ra")
p3 <- fit_weibull(team2, "rs")
p4 <- fit_weibull(team2, "ra")
plot_grid(p1, p2, p3, p4,
ncol=2, nrow=2)
}
twofit("BOS", "NYY")
twofit("BAL", "TBD")
twofit("TOR", "MIN")
twofit("CHW", "CLE")
twofit("DET", "KCR")
twofit("LAA", "OAK")
twofit("TEX", "SEA")
twofit("TEX", "SEA")
twofit("BOS", "NYY")
twofit("BAL", "TBD")
twofit("TOR", "MIN")
twofit("CHW", "CLE")
twofit("DET", "KCR")
twofit("LAA", "OAK")
twofit("BOS", "NYY")
twofit("BAL", "TBD")
twofit("TOR", "MIN")
twofit("CHW", "CLE")
twofit("DET", "KCR")
twofit("ANA", "OAK")
twofit("ANA", "OAK")
twofit("TEX", "SEA")
twofit("ANA", "OAK")
fit_weibull("ANA")
fit_weibull("ANA", "ra")
AL_mle_hash[["ANA"]]
source('~/Dropbox/f2018/sta631/Project/sta631_project.R')
AL_mle_hash[["ANA"]]
twofit("ANA", "OAK")
twofit("BOS", "NYY")
twofit("BAL", "TBD")
twofit("TOR", "MIN")
twofit("CHW", "CLE")
twofit("DET", "KCR")
twofit("ANA", "OAK")
twofit("TEX", "SEA")
source('~/Dropbox/f2018/sta631/Project/sta631_project.R')
source('~/Dropbox/f2018/sta631/Project/sta631_project.R')
twofit("BOS", "NYY")
twofit("BAL", "TBD")
twofit("TOR", "MIN")
twofit("CHW", "CLE")
twofit("DET", "KCR")
twofit("ANA", "OAK")
twofit("TEX", "SEA")
source('~/Dropbox/f2018/sta631/Project/sta631_project.R')
source('~/Dropbox/f2018/sta631/Project/sta631_project.R')
source('~/Dropbox/f2018/sta631/Project/sta631_project.R')
library(readr)
library(FAdist)
library(Lahman)
library(cowplot)
library(ggplot2)
library(hashmap)
data("Teams")
# Reference:
# Miller, S. J. (2005). A Derivation of the Pythagorean Won-Loss Formula in Baseball.
#   ArXiv:Math/0509698. Retrieved from http://arxiv.org/abs/math/0509698
# FUNCTIONS
fit_weibull <- function(team, stat="rs", method="mle") {
team_name <- teams$name[which(teams$franchID == team)]
# threshold, location, shift
Beta = -0.5
# shape
if (method == "mle") {
Gamma = AL_mle_hash[[team]]
} else if (method == "ls") {
Gamma = AL_ls_hash[[team]]
}
if (stat == "rs") {
rs_dataset <- paste0(team, "_rs.csv")
team_rs <- read_csv(rs_dataset)
runs <- rep(team_rs$Runs, team_rs$Games)
RS = mean(runs)
# scale (runs scored)
Alpha = (RS - Beta) / (gamma(1 + 1/Gamma))
df_stat <- data.frame(runs)
x_lab <- "runs scored"
} else if (stat == "ra") {
ra_dataset <- paste0(team, "_ra.csv")
team_ra <- read_csv(ra_dataset)
runs <- rep(team_ra$Runs, team_ra$Games)
RA = mean(runs)
# scale (runs against)
Alpha = (RA - Beta) / (gamma(1 + 1/Gamma))
df_stat <- data.frame(runs)
x_lab <- "runs allowed"
}
n_games = 162
bw = 1
p <- ggplot(df_stat, aes(runs)) +
ggtitle(paste("2004", team_name)) +
geom_histogram(binwidth = bw, col="blue", fill="grey") +
xlim(c(-0.5, 20)) +
xlab(x_lab) +
ylab("count") +
scale_y_continuous(breaks = scales::pretty_breaks(n = 10)) +
stat_function(
fun = function(x)
n_games * dweibull3(x, scale=Alpha, thres=Beta, shape=Gamma), color='red'
)
return(p)
}
twofit <- function(team1, team2) {
p1 <- fit_weibull(team1, "rs")
p2 <- fit_weibull(team1, "ra")
p3 <- fit_weibull(team2, "rs")
p4 <- fit_weibull(team2, "ra")
plot_grid(p1, p2, p3, p4, ncol=2, nrow=2)
}
# END FUNCTIONS
setwd("~/Dropbox/f2018/sta631/Project/data/2004")
teams <- subset(Teams, yearID == 2004)
# AL east, central, west
AL_teams <- c("BOS", "NYY", "BAL", "TBD", "TOR",
"MIN", "CHW", "CLE", "DET", "KCR",
"ANA", "OAK", "TEX", "SEA")
AL_ls  <- c(1.80, 1.77, 1.63, 1.82, 2.01,
1.80, 1.71, 1.81, 1.76, 1.80,
1.68, 1.79, 1.88, 1.76)
AL_mle <- c(1.82, 1.78, 1.66, 1.83, 1.97,
1.79, 1.73, 1.79, 1.78, 1.76,
1.71, 1.76, 1.90, 1.78)
AL_ls_hash  <- hashmap(AL_teams, AL_ls)
AL_mle_hash <- hashmap(AL_teams, AL_mle)
# NL east, central, west
NL_teams <- c("ATL", "PHI", "FLA", "NYM", "MTL",
"STL", "HOU", "CHC", "CIN", "PIT", "MIL",
"LAD", "SFG", "SDP", "COL", "ARI")
twofit("BOS", "NYY")
twofit("BAL", "TBD")
twofit("TOR", "MIN")
twofit("CHW", "CLE")
twofit("DET", "KCR")
twofit("ANA", "OAK")
twofit("TEX", "SEA")
twofit("BOS", "NYY")
twofit("BAL", "TBD")
twofit("TOR", "MIN")
twofit("CHW", "CLE")
twofit("DET", "KCR")
twofit("ANA", "OAK")
twofit("TEX", "SEA")
logWratio = log(98/64)
team = "BOS"
rs_dataset <- paste0(team, "_rs.csv")
team_rs <- read_csv(rs_dataset)
runs <- rep(team_rs$Runs, team_rs$Games)
RS = mean(runs)
# scale (runs scored)
Alpha = (RS - Beta) / (gamma(1 + 1/Gamma))
# threshold, location, shift
Beta = -0.5
Gamma = AL_mle_hash[[team]]
# scale (runs against)
Alpha = (RA - Beta) / (gamma(1 + 1/Gamma))
# scale (runs scored)
Alpha = (RS - Beta) / (gamma(1 + 1/Gamma))
df_stat <- data.frame(runs)
ra_dataset <- paste0(team, "_ra.csv")
team_ra <- read_csv(ra_dataset)
runs <- rep(team_ra$Runs, team_ra$Games)
RA = mean(runs)
# scale (runs against)
Alpha = (RA - Beta) / (gamma(1 + 1/Gamma))
RA
RS
logRratio = ( (RS - Beta) / (RS - Beta) + (RA - Beta) )
logRratio = log( (RS - Beta) / (RS - Beta) + (RA - Beta) )
logWratio
logRratio
lm(formula = logWratio ~ 0 + logRratio)
logRratio = log( (RS - Beta) / (RA - Beta) )
logRratio
lm(formula = logWratio ~ 0 + logRratio)
RS
RA
install.packages(c("packrat", "RJSONIO"))
install.packages(c("packrat", "RJSONIO"))
load("~/Dropbox/f2018/sta631/Project/project.RData")
t
source('~/Dropbox/f2018/sta631/Project/sta631_project.R')
twofit("BOS", "NYY")
twofit("BAL", "TBD")
twofit("TOR", "MIN")
twofit("CHW", "CLE")
twofit("DET", "KCR")
twofit("ANA", "OAK")
twofit("TEX", "SEA")
team = "BOS"
dataset <- paste0(team, "_rs.csv")
team_rs <- read_csv(dataset, col_types="iiiid")
class(team_rs)
source('~/Dropbox/f2018/sta631/Project/sta631_project.R')
source('~/Dropbox/f2018/sta631/Project/sta631_project.R')
source('~/Dropbox/f2018/sta631/Project/sta631_project.R')
twofit("BOS", "NYY")
dev.off()
twofit("BOS", "NYY")
source('~/Dropbox/f2018/sta631/Project/sta631_project.R')
twofit("BOS", "NYY")
twofit("BAL", "TBD")
twofit("TOR", "MIN")
twofit("CHW", "CLE")
twofit("DET", "KCR")
twofit("ANA", "OAK")
twofit("TEX", "SEA")
teams2 <- subset(Teams, yearID == 2004 & lgID == "AL")
View(teams2)
View(teams)
View(teams)
teams$franchID
source('~/Dropbox/f2018/sta631/Project/sta631_project.R')
twofit("BOS", "NYY")
twofit("BAL", "TBD")
twofit("TOR", "MIN")
twofit("CHW", "CLE")
twofit("DET", "KCR")
twofit("ANA", "OAK")
twofit("TEX", "SEA")
source('~/Dropbox/f2018/sta631/Project/sta631_project.R')
twofit("BOS", "NYY")
twofit("BAL", "TBD")
twofit("TOR", "MIN")
twofit("CHW", "CLE")
twofit("DET", "KCR")
twofit("ANA", "OAK")
twofit("TEX", "SEA")
source('~/Dropbox/f2018/sta631/Project/sta631_project.R')
twofit("BOS", "NYY")
twofit("BAL", "TBD")
twofit("TOR", "MIN")
twofit("CHW", "CLE")
twofit("DET", "KCR")
twofit("ANA", "OAK")
twofit("TEX", "SEA")
twofit("BOS", "NYY")
twofit("BAL", "TBD")
twofit("TOR", "MIN")
twofit("CHW", "CLE")
twofit("DET", "KCR")
source('~/Dropbox/f2018/sta631/Project/sta631_project.R')
twofit("BOS", "NYY")
twofit("BAL", "TBD")
twofit("TOR", "MIN")
twofit("CHW", "CLE")
twofit("DET", "KCR")
twofit("ANA", "OAK")
twofit("TEX", "SEA")
source('~/Dropbox/f2018/sta631/Project/sta631_project.R')
twofit("BOS", "NYY")
twofit("BAL", "TBD")
twofit("TOR", "MIN")
twofit("CHW", "CLE")
twofit("DET", "KCR")
twofit("ANA", "OAK")
twofit("TEX", "SEA")
source('~/Dropbox/f2018/sta631/Project/sta631_project.R')
twofit("BOS", "NYY")
twofit("BAL", "TBD")
twofit("TOR", "MIN")
twofit("CHW", "CLE")
twofit("DET", "KCR")
twofit("ANA", "OAK")
twofit("TEX", "SEA")
twofit("CHW", "CLE")
source('~/Dropbox/f2018/sta631/Project/sta631_project.R')
twofit("CHW", "CLE")
source('~/Dropbox/f2018/sta631/Project/sta631_project.R')
twofit("CHW", "CLE")
source('~/Dropbox/f2018/sta631/Project/sta631_project.R')
source('~/Dropbox/f2018/sta631/Project/sta631_project.R')
source('~/Dropbox/f2018/sta631/Project/sta631_project.R')
dev.off()
source('~/Dropbox/f2018/sta631/Project/sta631_project.R')
twofit("BOS", "NYY")
twofit("BAL", "TBD")
twofit("TOR", "MIN")
twofit("CHW", "CLE")
twofit("DET", "KCR")
twofit("ANA", "OAK")
twofit("TEX", "SEA")
source('~/Dropbox/f2018/sta631/Project/sta631_project.R')
main()
source('~/Dropbox/f2018/sta631/Project/sta631_project.R')
main()
source('~/Dropbox/f2018/sta631/Project/sta631_project.R')
source('~/Dropbox/f2018/sta631/Project/sta631_project.R')
twofit("BOS", "NYY")
twofit("BAL", "TBD")
twofit("TOR", "MIN")
twofit("CHW", "CLE")
twofit("DET", "KCR")
twofit("ANA", "OAK")
twofit("TEX", "SEA")
install.packages("gamlss")
?family
pwd()
cwd()
getcwd()
getwd()
dataset <- "BOS_rs.csv"
score_df <- read_csv(dataset, col_types="iiiid")
score_seq <- rep(score_df$Runs, score_df$Games)
plot(table(score_seq), main="Runs Scored")
dat=data.frame(x=c(1,2,3,4,5,6),
y=c(1,3,5,6,8,12))
View(dat)
min.RSS <- function(data, par) {
min.RSS <- function(data, par) {
with(data, sum((par[1] + par[2] * x - y)^2))
}
min.RSS <- function(data, par) {
with(data, sum((par[1] + par[2] * x - y)^2))
}
min.RSS <- function(data, par) {
with(data, sum((par[1] + par[2] * x - y)^2)))
}
min.RSS <- function(data, par) {
with( data, sum( (par[1] + par[2] * x - y)^2 ) )
}
result <- optim(par = c(0, 1), min.RSS, data = dat)
View(result)
result
plot(y ~ x, data = dat)
abline(a = result$par[1], b = result$par[2], col = "red")
pweibull3(q, 1.82, 5, -0.5)
pweibull3(6, 1.82, 5, -0.5)
source('~/Dropbox/f2018/sta631/Project/sta631_project.R')
twofit("BOS", "NYY")
twofit("BAL", "TBD")
twofit("TOR", "MIN")
twofit("CHW", "CLE")
twofit("DET", "KCR")
twofit("ANA", "OAK")
twofit("TEX", "SEA")
source('~/Dropbox/f2018/sta631/Project/sta631_project.R')
twofit("CHW", "CLE")
source('~/Dropbox/f2018/sta631/Project/sta631_project.R')
twofit("CHW", "CLE")
source('~/Dropbox/f2018/sta631/Project/sta631_project.R')
twofit("TOR", "MIN")
source('~/Dropbox/f2018/sta631/Project/sta631_project.R')
twofit("TOR", "MIN")
source('~/Dropbox/f2018/sta631/Project/sta631_project.R')
twofit("TOR", "MIN")
source('~/Dropbox/f2018/sta631/Project/sta631_project.R')
twofit("BOS", "NYY")
twofit("BAL", "TBD")
twofit("TOR", "MIN")
twofit("CHW", "CLE")
twofit("DET", "KCR")
twofit("ANA", "OAK")
twofit("TEX", "SEA")
source('~/Dropbox/f2018/sta631/Project/sta631_project.R')
source('~/Dropbox/f2018/sta631/Project/sta631_project.R')
source('~/Dropbox/f2018/sta631/Project/sta631_project.R')
source('~/Dropbox/f2018/sta631/Project/sta631_project.R')
twofit("TOR", "MIN")
source('~/Dropbox/f2018/sta631/Project/sta631_project.R')
twofit("BOS", "NYY")
twofit("BAL", "TBD")
twofit("TOR", "MIN")
twofit("CHW", "CLE")
twofit("DET", "KCR")
twofit("ANA", "OAK")
twofit("TEX", "SEA")
source('~/Dropbox/f2018/sta631/Project/sta631_project.R')
twofit("CHW", "CLE")
source('~/Dropbox/f2018/sta631/Project/sta631_project.R')
twofit("DET", "KCR")
library(MASS)
source('~/Dropbox/f2018/sta631/Project/sta631_project.R')
source('~/Dropbox/f2018/sta631/Project/sta631_project.R')
source('~/Dropbox/f2018/sta631/Project/sta631_project.R')
source('~/Dropbox/f2018/sta631/Project/sta631_project.R')
source('~/Dropbox/f2018/sta631/Project/sta631_project.R')
twofit("BOS", "NYY")
twofit("BAL", "TBD")
twofit("TOR", "MIN")
twofit("CHW", "CLE")
twofit("DET", "KCR")
twofit("ANA", "OAK")
twofit("TEX", "SEA")
dev.off()
twofit("BOS", "NYY")
twofit("BAL", "TBD")
twofit("TOR", "MIN")
twofit("CHW", "CLE")
twofit("DET", "KCR")
twofit("ANA", "OAK")
twofit("TEX", "SEA")
RS = 949
RA = 768
Wpct = RS^1.82 / (RS^1.82 + RA^1.82)
Wpct
98/162
96/162
Beta = -0.5
(RS - Beta)^1.82 / ((RS - Beta)^1.82 + (RA - Beta)^1.82)
Gamma = 1.80
(RS - Beta)^Gamma / ((RS - Beta)^Gamma + (RA - Beta)^Gamma)
install.packages(c("ggpubr", "openssl"))
dataset <- "BOS_rs.csv"
score_df <- read_csv(dataset, col_types="iiiid")
library(readr)
score_df <- read_csv(dataset, col_types="iiiid")
View(score_df)
score_seq <- rep(score_df$Runs, score_df$Games)
score_seq
s
df_stat <- data.frame(score_seq)
View(df_stat)
source('~/Dropbox/f2018/sta631/Project/sta631_project.R')
twofit("BOS", "NYY")
twofit("BAL", "TBD")
twofit("TOR", "MIN")
twofit("CHW", "CLE")
twofit("DET", "KCR")
twofit("ANA", "OAK")
twofit("TEX", "SEA")
source('~/Dropbox/f2018/sta631/Project/sta631_project.R')
twofit("TEX", "SEA")
twofit("BOS", "NYY")
twofit("BAL", "TBD")
twofit("TOR", "MIN")
twofit("CHW", "CLE")
twofit("DET", "KCR")
twofit("ANA", "OAK")
twofit("TEX", "SEA")
source('~/Dropbox/f2018/sta631/Project/sta631_project.R')
twofit("BOS", "NYY")
twofit("BAL", "TBD")
twofit("TOR", "MIN")
twofit("CHW", "CLE")
twofit("DET", "KCR")
twofit("ANA", "OAK")
twofit("TEX", "SEA")

library(readxl)
DigitalCameras <- read_excel("Dropbox/S2018/sta312/wk2/Excel_Data_Sets/DigitalCameras.xls")
View(DigitalCameras)
summary(DigitalCameras$Type)
class(DigitalCameras$Type)
summary(DigitalCameras)
table(DigitalCameras$Type)
adv_compact <- filter(DigitalCameras, Type == "advanced compact")
compact <- filter(DigitalCameras, Type == "compact")
subcompact <- filter(DigitalCameras, Type == "subcompact")
super_zoom <- filter(DigitalCameras, Type == "super-zoom")
summary(adv_compact)
summary(compact)
summary(subcompact)
summary(super_zoom)
install.packages(c("miniUI", "modelr", "shiny"))
library(readxl)
Cars99 <- read_excel("Dropbox/S2018/sta312/Excel_Data_Sets/Cars99.xls",
na = "*")
View(Cars99)
?cor
cor(Cars99$Weight, Cars99$`Time for 1/4 Mile`)
cor(Cars99$Weight, Cars99$`Time for 1/4 Mile`, na.rm = true)
cor(Cars99$Weight, Cars99$`Time for 1/4 Mile`, na.rm = TRUE)
cor(Cars99$Weight, Cars99$`Time for 1/4 Mile`)
cor(Cars99$`Time for 1/4 Mile`, Cars99$Weight)
cor(Cars99$Weight, Cars99$`Time for 1/4 Mile`, use='complete.obs')
cor(Cars99$`Time for 1/4 Mile`, Cars99$Weight, use='complete.obs')
cor(Cars99$`Time for 1/4 Mile`, Cars99$Weight, use='pairwise.complete.obs')
cor(Cars99$Weight, Cars99$`Time for 1/4 Mile`, use='pairwise.complete.obs')
cor(Cars99$`Acceleration 0-60`, Cars99$`Time for 1/4 Mile`, use='complete.obs')
cor(Cars99$`Acceleration 0-60`, Cars99$`Time for 1/4 Mile`, use='pairwise.complete.obs')
cor(Cars99$`Page Number`, Cars99$`Fuel Capacity`, use='complete.obs')
cor(Cars99$Weight, Cars99$`City MPG`, use='complete.obs')
cor(Cars99)
cor(Cars99$`City MPG`, Cars99$`Front Weight`, use='complete.obs')
cor(Cars99$`City MPG`, Cars99$`Highway MPG`, use='complete.obs')
cor(Cars99$`Fuel Capacity`, Cars99$`Highway MPG`, use='complete.obs')
cor(Cars99$`Fuel Capacity`, Cars99$`Front Weight`, use='complete.obs')
cor(Cars99$`City MPG`, Cars99$`Time for 1/4 Mile`)
cor(Cars99$`City MPG`, Cars99$`Time for 1/4 Mile`, use='complete.obs')
library(readxl)
Governors08 <- read_excel("Dropbox/S2018/sta312/Excel_Data_Sets/Governors08.xls")
View(Governors08)
library(tidyverse)
ggplot(Governors08, aes(x=`Median Property Value`, y=Salary)) + geom_point()
cor(Governors08$`Median Property Value`, Governors08$Salary)
ggplot(Governors08, aes(x=`Median Property Value`, y=Salary)) + geom_point()
library(readxl)
Governors08_copy <- read_excel("Dropbox/S2018/sta312/Excel_Data_Sets/Governors08-copy.xls")
View(Governors08_copy)
ggplot(Governors08_copy, aes(x=`Median Property Value`, y=Salary)) + geom_point()
cor(Governors08_copy$`Median Property Value`, Governors08_copy$Salary)
library(readxl)
Governors08_copy <- read_excel("Dropbox/S2018/sta312/Excel_Data_Sets/Governors08-copy.xls")
View(Governors08_copy)
cor(Governors08_copy$`Median Property Value`, Governors08_copy$Salary)
ggplot(Governors08_copy, aes(x=`Median Property Value`, y=Salary)) + geom_point()
ggplot(Governors08_copy, aes(x=`Median Property Value`, y=Salary)) + geom_point()
library(readxl)
Governors08_copy <- read_excel("Dropbox/S2018/sta312/Excel_Data_Sets/Governors08-copy.xls")
View(Governors08_copy)
ggplot(Governors08_copy, aes(x=`Median Property Value`, y=Salary)) + geom_point()
cor(Governors08_copy$`Median Property Value`, Governors08_copy$Salary)
library(readxl)
TVlife06 <- read_excel("Dropbox/S2018/sta312/Excel_Data_Sets/TVlife06.xls")
View(TVlife06)
cor(TVlife06$`TVs per K`, TVlife06$`Life Expectancy`)
library(readxl)
HousePricesAG <- read_excel("Dropbox/S2018/sta312/Excel_Data_Sets/HousePricesAG.xls")
View(HousePricesAG)
?lm
lm(Price ~ `Size (in sq ft)`, HousePricesAG)
library(readxl)
TrotSpeeds <- read_excel("Dropbox/S2018/sta312/Excel_Data_Sets/TrotSpeeds.xls")
View(TrotSpeeds)
?resid
trotspeed.lm <- lm(`Body Mass` ~ `Trot Speed`, TrotSpeeds)
trotspeed.res <- resid(trotspeed.lm)
ggplot(TrotSpeeds, aes(y= TrotSpeeds$`Trot Speed`, x=trotspeed.res)) + geom_point()
ggplot(TrotSpeeds, aes(x= TrotSpeeds$`Trot Speed`, y=trotspeed.res)) + geom_point()
ggplot(TrotSpeeds, aes(x= TrotSpeeds$`Body Mass`, y=trotspeed.res)) + geom_point()
ggplot(TrotSpeeds, aes(x= TrotSpeeds$`Body Mass`, y=TrotSpeeds$`Trot Speed`)) + geom_point()
?log
ggplot(TrotSpeeds, aes(x= log10(TrotSpeeds$`Body Mass`), y=TrotSpeeds$`Trot Speed`)) + geom_point()
lm(log10(TrotSpeeds$`Body Mass`), TrotSpeeds$`Trot Speed`)
lm(log10(TrotSpeeds$`Body Mass`) ~ TrotSpeeds$`Trot Speed`)
cor(TrotSpeeds$`Body Mass`, TrotSpeeds$`Trot Speed`)
cor(TrotSpeeds$`Body Mass`, TrotSpeeds$`Trot Speed`)^2
0.73*0.73
lm(log10(TrotSpeeds$`Trot Speed`) ~ TrotSpeeds$`Body Mass`)
cor(log10(TrotSpeeds$`Trot Speed`), TrotSpeeds$`Body Mass`)
cor(log10(TrotSpeeds$`Trot Speed`), TrotSpeeds$`Body Mass`)^2
lm(TrotSpeeds$`Trot Speed` ~ log10(TrotSpeeds$`Body Mass`)
)
cor(TrotSpeeds$`Trot Speed`, log10(TrotSpeeds$`Body Mass`)
)
cor(TrotSpeeds$`Trot Speed`, log10(TrotSpeeds$`Body Mass`))
cor(TrotSpeeds$`Trot Speed`, log10(TrotSpeeds$`Body Mass`))^2
0.939^2
cor(TrotSpeeds$`Trot Speed`, log10(TrotSpeeds$`Body Mass`))
(cor(TrotSpeeds$`Trot Speed`, log10(TrotSpeeds$`Body Mass`)))^2
log_trotspeed.lm <- lm(TrotSpeeds$`Trot Speed` ~ log10(TrotSpeeds$`Body Mass`)
log_trotspeed.res <- resid(log_trotspeed.lm)
log_trotspeed.lm <- lm(TrotSpeeds$`Trot Speed` ~ log10(TrotSpeeds$`Body Mass`))
log_trotspeed.res <- resid(log_trotspeed.lm)
ggplot(TrotSpeeds, aes(y=TrotSpeeds, x=log_trotspeed.res)) +geom_point()
ggplot(TrotSpeeds, aes(y=`Trot Speed`, x=log_trotspeed.res)) +geom_point()
ggplot(TrotSpeeds, aes(x=log10(`Body Mass`), y=log_trotspeed.res)) +geom_point()
install.packages(c("forecast", "httpuv", "manipulateWidget", "munsell", "reprex", "rmarkdown", "stringi", "zoo"))
d1 = sample(1:72, 1000, replace=T)
d1
summary(d1)
wheel_sim = sample(1:72, 1000, replace=T)
summary(wheel_sim)
table(wheel_sim)
sort(wheel_sim)
wheel_sim[names(wheel_sim) == 72]
a <- table(wheel_sim)
a[names(a) == 72]
a[names(a) == 71]
a[names(a) == 70]
a[names(a) == 15]
a[names(a) == 13]
a[names(a) == 42]
a[names(a) == 41]
a[names(a) == 40]
install.packages(c("carData", "chron", "cli", "data.table", "digest", "expm", "htmlwidgets", "maptools", "nloptr", "R6", "Rcpp", "reprex", "rstan", "rstudioapi", "TTR", "xts", "zoo"))
curve(dnorm(x,m=10,sd=2),from=0,to=20,main="Normal distribution")
curve(dgamma(x, scale=1.5, shape=2),from=0, to=15, main="Gamma
distribution")
curve(dweibull(x, scale=2.5, shape=1.5),from=0, to=15, main="Weibull
distribution")
library(readr)
bos_rs <- read_csv("Dropbox/f2018/sta631/Project/bos_rs.csv")
View(bos_rs)
rep(0, 3)
c(rep(0, 3), rep(1,9), rep(2,12), rep(3,15))
c(rep(0, 3), rep(1,9), rep(2,12), rep(3,15), rep(4, 27), rep(5, 16), rep(6,19), rep(7,16), rep(8,10), rep(9,10), rep(10,5), rep(11,10), rep(12,6), rep(13,1), rep(14,3))
bos_runs <- c(rep(0, 3), rep(1,9), rep(2,12), rep(3,15), rep(4, 27), rep(5, 16), rep(6,19), rep(7,16), rep(8,10), rep(9,10), rep(10,5), rep(11,10), rep(12,6), rep(13,1), rep(14,3))
hist(bos_runs)
?hist
hist(bos_runs, breaks = 1)
?hist
max(bos_runs)
table(bos_runs)
max(table(bos_runs))
hist(bos_runs, breaks = max(table(bos_runs)))
hist(bos_runs, breaks = max(bos_runs))
library(ggplot2)
qplot(bos_runs, geom="histogram")
qplot(bos_runs, geom="histogram", binwidth=15)
qplot(bos_runs, geom="histogram", binwidth=1)
sum(bos_runs)
?dweibull
mean(bos_runs)
x <- c(0, rlnorm(50))
all.equal(dweibull(x, shape = 1), dexp(x))
all.equal(pweibull(x, shape = 1, scale = pi), pexp(x, rate = 1/pi))
all.equal(pweibull(x, 2.5, pi, lower.tail = FALSE, log.p = TRUE),
-(x/pi)^2.5, tolerance = 1e-15)
all.equal(qweibull(x/11, shape = 1, scale = pi), qexp(x/11, rate = 1/pi))
curve(dweibull(x, scale=2.5, shape=1.5),from=0, to=15, main="Weibull
+ distribution")
curve(dweibull(x, scale=2.5, shape=-0.5),from=0, to=15, main="Weibull
+ distribution")
curve(dweibull(x, scale=2.5, shape=1.82),from=0, to=15, main="Weibull
+ distribution")
curve(dweibull(x, scale=2.5, shape=2),from=0, to=15, main="Weibull
+ distribution")
curve(dweibull(x, scale=4, shape=1.82),from=0, to=15, main="Weibull
+ distribution")
qplot(bos_runs, geom="histogram", binwidth=1)
curve(dweibull(x, scale=4, shape=1.82),from=0, to=15, main="Weibull
+ distribution")
curve(dweibull(x, scale=4, shape=1.82),from=0, to=25, main="Weibull
+ distribution")
mean(bos_runs)
curve(dweibull(x, scale=5.86, shape=1.82),from=0, to=25, main="Weibull
+ distribution")
ggplot(bos_runs, aes(x)) + geom_histogram(aes(y = stat(density)))
ggplot(bos_runs) + geom_histogram(aes(y = stat(density)))
bos_runs <- data.frame(bos_runs)
ggplot(bos_runs, aes(x)) + geom_histogram(aes(y = stat(density)))
View(bos_runs)
ggplot(bos_runs, aes(bos_runs)) + geom_histogram(aes(y = stat(density)))
ggplot(bos_runs, aes(bos_runs)) + geom_histogram(aes(y = stat(density)), binwidth = 1)
ggplot(bos_runs, aes(bos_runs)) + geom_histogram(aes(y = stat(density)), binwidth = 1)
ggplot(bos_runs, aes(bos_runs)) + geom_histogram(aes(y = stat(density)), binwidth = 1)
ggplot(bos_runs, aes(bos_runs)) + geom_histogram(aes(y = stat(frequency())), binwidth = 1)
ggplot(bos_runs, aes(bos_runs)) + geom_histogram(aes(y = stat(frequency(bos_runs))), binwidth = 1)
ggplot(bos_runs, aes(bos_runs)) + geom_histogram(aes(y = stat(density)), binwidth = 1)
ggplot(bos_runs, aes(bos_runs)) + geom_histogram(aes(y = stat(frequency(x))), binwidth = 1)
ggplot(bos_runs, aes(bos_runs)) + geom_histogram(aes(y = stat(count.fields(x))), binwidth = 1)
ggplot(bos_runs, aes(bos_runs)) + geom_histogram(aes(y = stat(density), binwidth = 1)
)
ggplot(bos_runs, aes(bos_runs)) + geom_histogram(aes(y = stat(density)), binwidth = 1)
ggplot(bos_runs, aes(bos_runs)) + geom_histogram(aes(y = bos_runs, binwidth = 1)
ggplot(bos_runs, aes(bos_runs)) + geom_histogram(aes(y = bos_runs), binwidth = 1)
ggplot(bos_runs, aes(bos_runs)) + geom_histogram(aes(y = bos_runs), binwidth = 1)
ggplot(bos_runs, aes(bos_runs)) + geom_histogram(aes(bos_runs), binwidth = 1)
ggplot(bos_runs, aes(bos_runs)) + geom_histogram(aes(bos_runs), binwidth = 1) +
stat_function()
ggplot(bos_runs, aes(bos_runs)) + geom_histogram(aes(bos_runs), binwidth = 1) +
stat_function(fun = dweibull, args = list(shape = 1.82, scale=5.86), lwd =2, col = 'red')
stat_function(fun = dweibull, args = list(shape = 1.82, scale=mean(bos_runs)), lwd =2, col = 'red')
library(readr)
bos_rs <- read_csv("Dropbox/f2018/sta631/Project/bos_rs.csv")
View(bos_rs)
source('~/Dropbox/f2018/sta631/Project/boston.R', echo=TRUE)
source('~/Dropbox/f2018/sta631/Project/boston.R', echo=TRUE)
source('~/Dropbox/f2018/sta631/Project/boston.R', echo=TRUE)
source('~/Dropbox/f2018/sta631/Project/boston.R', echo=TRUE)
source('~/Dropbox/f2018/sta631/Project/boston.R')
source('~/Dropbox/f2018/sta631/Project/boston.R')
source('~/Dropbox/f2018/sta631/Project/boston.R')
source('~/Dropbox/f2018/sta631/Project/boston.R')
source('~/Dropbox/f2018/sta631/Project/boston.R')
source('~/Dropbox/f2018/sta631/Project/boston.R')
source('~/Dropbox/f2018/sta631/Project/boston.R')
source('~/Dropbox/f2018/sta631/Project/boston.R')
source('~/Dropbox/f2018/sta631/Project/boston.R')
source('~/Dropbox/f2018/sta631/Project/boston.R')
source('~/Dropbox/f2018/sta631/Project/boston.R')
source('~/Dropbox/f2018/sta631/Project/boston.R')
source('~/Dropbox/f2018/sta631/Project/boston.R')
source('~/Dropbox/f2018/sta631/Project/boston.R')
source('~/Dropbox/f2018/sta631/Project/boston.R')
source('~/Dropbox/f2018/sta631/Project/boston.R')
source('~/Dropbox/f2018/sta631/Project/boston.R')
source('~/Dropbox/f2018/sta631/Project/boston.R')
source('~/Dropbox/f2018/sta631/Project/boston.R')
source('~/Dropbox/f2018/sta631/Project/boston.R')
source('~/Dropbox/f2018/sta631/Project/boston.R', echo=TRUE)
View(df)
source('~/Dropbox/f2018/sta631/Project/boston.R')
source('~/Dropbox/f2018/sta631/Project/boston.R')
source('~/Dropbox/f2018/sta631/Project/boston.R')
source('~/Dropbox/f2018/sta631/Project/boston.R')
source('~/Dropbox/f2018/sta631/Project/boston.R')
source('~/Dropbox/f2018/sta631/Project/boston.R')
source('~/Dropbox/f2018/sta631/Project/boston.R')
source('~/Dropbox/f2018/sta631/Project/boston.R')
source('~/Dropbox/f2018/sta631/Project/boston.R')
source('~/Dropbox/f2018/sta631/Project/boston.R')
dat = data.frame(r=rweibull(162, shape=1.82, scale=5.86))
View(dat)
p <- ggplot(dat, aes(r)) +geom_density(size=1)
print(p)
source('~/Dropbox/f2018/sta631/Project/boston.R')
source('~/Dropbox/f2018/sta631/Project/boston.R')
source('~/Dropbox/f2018/sta631/Project/boston.R')
source('~/Dropbox/f2018/sta631/Project/boston.R')
source('~/Dropbox/f2018/sta631/Project/boston.R')
source('~/Dropbox/f2018/sta631/Project/boston.R')
runs <- bos_rs$Runs
games <- bos_rs$Games
rep(runs, games)
source('~/Dropbox/f2018/sta631/Project/boston.R')
source('~/Dropbox/f2018/sta631/Project/boston.R')
print(p1)
print(p2)
View(df_rs)
View(df_ra)
mean(bos_rs)
mean(rs)
mean(ra)
source('~/Dropbox/f2018/sta631/Project/boston.R')
source('~/Dropbox/f2018/sta631/Project/boston.R')
source('~/Dropbox/f2018/sta631/Project/boston.R')
source('~/Dropbox/f2018/sta631/Project/boston.R')
View(bos_ra)
View(bos_rs)
source('~/Dropbox/f2018/sta631/Project/boston.R')
source('~/Dropbox/f2018/sta631/Project/boston.R')
# 'stat_function' parameters
games = 162
install.packages("FAdist")
df_rs <- data.frame(rs)
source('~/Dropbox/f2018/sta631/Project/boston.R')
View(bos_ra)
View(bos_rs)
View(df_rs)
install.packages(c("coda", "devtools", "digest", "dplyr", "evaluate", "fansi", "MASS", "mime", "ps", "rlang", "rstan", "StanHeaders", "testthat", "tidyselect", "tinytex", "xfun"))
install.packages(c("devtools", "ggplot2", "lattice", "MASS", "Matrix", "mgcv", "pkgload", "psych", "remotes", "rlang", "sessioninfo", "survival", "tidyr", "xts"))
install.packages(c("ps", "rcmdcheck"))
install.packages("Lahman")
library(Lahman)
data("Teams")
teams <- Teams
View(teams)
install.packages(c("Rcpp", "rstan"))
install.packages("glmnet")
install.packages(c("dplyr", "lme4", "rcmdcheck", "RcppArmadillo", "RJSONIO"))
install.packages(c("knitr", "rmarkdown", "prettydoc", "tufte", "rticles"))
library(readr)
teams2 <- read_csv("Dropbox/f2018/sta631/Project/data/teams2.csv")
View(teams2)
library(readr)
teams2 <- read_csv("Dropbox/f2018/sta631/Project/data/teams2.csv")
View(teams2)
teams2 <- read.csv("~/Dropbox/f2018/sta631/Project/data/teams2.csv")
View(teams2)
View(teams2)
library(readr)
teams2 <- read_csv("Dropbox/f2018/sta631/Project/data/teams2.csv",
na = "empty")
View(teams2)
library(readr)
teams3 <- read_csv("Dropbox/f2018/sta631/Project/data/teams3.csv")
View(teams3)
log10(10^4)
log(10^4)
4(log(10))
4*(log(10))
f <- function(x) x
curve(f, from=0, to=2)
curve(0, from=0, to=2)
bx <- function() return 0
bx <- function(x) return 0
bx <- function(x) 0
bx
bx(7)
bx(9)
curve(bx, from=0, to=2)
knitr::opts_chunk$set(echo = TRUE)
f <- function(x) x
curve(f, from=0, to=2)
abline(v = 0)
abline(h = 2)
library(car)
library(pls)
library(glmnet)
install.packages(c("car", "pls", "glmnet"))
library(car)
library(pls)
library(glmnet)
# BEGIN DATA INPUT #
#
# reproducibility
set.seed(42)
# Lahman's baseball databank
setwd("~/Dropbox/f2018/sta631/Project/baseballdatabank-master/core/")
# intentionally using base not 'readr' to input CSV; HBP and SF columns mis-handled by 'readr'
teams <- read.csv("Teams.csv")
# drop any winless teams: e.g. 1872 NAT & 1873 MAR
# keeping them in breaks lm(logWratio) call below
teams <- subset(teams, W != 0)
# ALL DATA SINCE 1871
teams_1871 <- subset(teams)[ , c(01, 04, 07, 09, 10, 15:41)]
train_1871 <- sample(1:nrow(teams_1871), nrow(teams_1871) * 0.6667)
test_1871 <- (-train_1871)
# DATA SINCE 1970
teams_1970 <- subset(teams, yearID > 1969)[ , c(01, 04, 07, 09, 10, 15:41)]
train_1970 <- sample(1:nrow(teams_1970), nrow(teams_1970) * 0.6667)
test_1970 <- (-train_1970)
# BEGIN ALL DATA ANALYSIS #
#
# LINEAR
# derive run-diff, win-pct, and singles (X1B) columns
teams_1871$RD <- with(teams_1871, R - RA)
teams_1871$Wpct <- with(teams_1871, W / (W + L))
teams_1871$X1B <- with(teams_1871, H - (X2B + X3B + HR))
lin.fit <- lm(Wpct ~ RD, data=teams_1871)
# derive pythagorean win.pct column
teams_1871$pytWpct <- with(teams_1871, R^2 / (R^2 + RA^2))
# log win ratio (pyth. exp. exponent)
teams_1871$logWratio <- log(teams_1871$W / teams_1871$L)
teams_1871$logRratio <- log(teams_1871$R / teams_1871$RA)
pyt_1871.fit <- lm(logWratio ~ 0 + logRratio, data=teams_1871)
(pyt_1871.fit)
# drop non-predictors
# select option, by row:
# derived: run-diff, win-pct
# batting/scoring
# pitching
# fielding
# NOTE: SO, CS, SB removed due to lack of complete cases
# also removed R, RA, AB, H, and IPouts
slim_1871 <- subset(teams_1871,
select = c(RD, Wpct,
X1B, X2B, X3B, HR, BB,
ER, ERA, CG, SHO, SV, HA, HRA, BBA, SOA,
E, DP, FP))
slim_1871_noRD <- subset(teams_1871,
select = c(Wpct,
X1B, X2B, X3B, HR, BB,
ER, ERA, CG, SHO, SV, HA, HRA, BBA, SOA,
E, DP, FP))
# set up model matrix
x <- model.matrix(Wpct ~ ., slim_1871)[, -1]
y <- slim_1871$Wpct
y.test <- y[test_1871]
pcr.fit.full <- pcr(Wpct ~ ., data=slim_1871, scale=TRUE, validation="CV")
summary(pcr.fit.full)
validationplot(pcr.fit.full, val.type="MSEP")
# train/test
pcr.fit.train <- pcr(Wpct ~ ., data=slim_1871, subset=train_1871, scale=TRUE, validation="CV")
summary(pcr.fit.train)
validationplot(pcr.fit.train, val.type="MSEP")
# fit on full dataset, get MSE
pcr.pred <- predict(pcr.fit.train, x[test_1871, ], ncomp=4)
mean((pcr.pred - y.test)^2)
# loading matrices
loadings(pcr.fit.full)[, 1:6]
abs(loadings(pcr.fit.full)[, 1:6]) > 0.45
loadings(pcr.fit.train)[, 1:6]
abs(loadings(pcr.fit.train)[, 1:6]) > 0.45
# set up model matrix (no RD)
x <- model.matrix(Wpct ~ ., slim_1871_noRD)[, -1]
y <- slim_1871_noRD$Wpct
y.test <- y[test_1871]
# 1871 PCR without RD #
pcr.fit.full <- pcr(Wpct ~ ., data=slim_1871_noRD, scale=TRUE, validation="CV")
summary(pcr.fit.full)
validationplot(pcr.fit.full, val.type="MSEP")
# train/test
pcr.fit.train <- pcr(Wpct ~ ., data=slim_1871_noRD, subset=train_1871, scale=TRUE, validation="CV")
summary(pcr.fit.train)
validationplot(pcr.fit.train, val.type="MSEP")
# fit on full dataset, get MSE
pcr.pred <- predict(pcr.fit.train, x[test_1871, ], ncomp=14)
mean((pcr.pred - y.test)^2)
# loading matrices
loadings(pcr.fit.full)[, 1:6]
abs(loadings(pcr.fit.full)[, 1:6]) > 0.45
slim_1871 <- subset(teams_1871,
select = c(R, RA, RD, Wpct,
X1B, X2B, X3B, HR, BB,
ER, ERA, CG, SHO, SV, HA, HRA, BBA, SOA,
E, DP, FP))
slim_1871_noRD <- subset(teams_1871,
select = c(R, RA, Wpct,
X1B, X2B, X3B, HR, BB,
ER, ERA, CG, SHO, SV, HA, HRA, BBA, SOA,
E, DP, FP))
# set up model matrix
x <- model.matrix(Wpct ~ ., slim_1871)[, -1]
y <- slim_1871$Wpct
y.test <- y[test_1871]
pcr.fit.full <- pcr(Wpct ~ ., data=slim_1871, scale=TRUE, validation="CV")
summary(pcr.fit.full)
validationplot(pcr.fit.full, val.type="MSEP")
# train/test
pcr.fit.train <- pcr(Wpct ~ ., data=slim_1871, subset=train_1871, scale=TRUE, validation="CV")
summary(pcr.fit.train)
validationplot(pcr.fit.train, val.type="MSEP")
# fit on full dataset, get MSE
pcr.pred <- predict(pcr.fit.train, x[test_1871, ], ncomp=4)
mean((pcr.pred - y.test)^2)
# loading matrices
loadings(pcr.fit.full)[, 1:6]
abs(loadings(pcr.fit.full)[, 1:6]) > 0.45
# set up model matrix (no RD)
x <- model.matrix(Wpct ~ ., slim_1871_noRD)[, -1]
y <- slim_1871_noRD$Wpct
y.test <- y[test_1871]
y.test <- y[test_1871]
# loading matrices
loadings(pcr.fit.full)[, 1:6]
slim_1871 <- subset(teams_1871,
select = c(RD, Wpct,
X1B, X2B, X3B, HR, BB,
ER, ERA, CG, SHO, SV, HA, HRA, BBA, SOA,
E, DP, FP))
slim_1871_noRD <- subset(teams_1871,
select = c(Wpct,
X1B, X2B, X3B, HR, BB,
ER, ERA, CG, SHO, SV, HA, HRA, BBA, SOA,
E, DP, FP))
# set up model matrix
x <- model.matrix(Wpct ~ ., slim_1871)[, -1]
y <- slim_1871$Wpct
y.test <- y[test_1871]
# PCR
# 1871 PCR with RD #
# full dataset
pcr.fit.full <- pcr(Wpct ~ ., data=slim_1871, scale=TRUE, validation="CV")
summary(pcr.fit.full)
validationplot(pcr.fit.full, val.type="MSEP")
# train/test
pcr.fit.train <- pcr(Wpct ~ ., data=slim_1871, subset=train_1871, scale=TRUE, validation="CV")
summary(pcr.fit.train)
validationplot(pcr.fit.train, val.type="MSEP")
# fit on full dataset, get MSE
pcr.pred <- predict(pcr.fit.train, x[test_1871, ], ncomp=4)
mean((pcr.pred - y.test)^2)
# loading matrices
loadings(pcr.fit.full)[, 1:6]
abs(loadings(pcr.fit.full)[, 1:6]) > 0.45
loadings(pcr.fit.train)[, 1:6]
abs(loadings(pcr.fit.train)[, 1:6]) > 0.45
# set up model matrix (no RD)
x <- model.matrix(Wpct ~ ., slim_1871_noRD)[, -1]
y <- slim_1871_noRD$Wpct
y.test <- y[test_1871]
# 1871 PCR without RD #
pcr.fit.full <- pcr(Wpct ~ ., data=slim_1871_noRD, scale=TRUE, validation="CV")
summary(pcr.fit.full)
validationplot(pcr.fit.full, val.type="MSEP")
# train/test
pcr.fit.train <- pcr(Wpct ~ ., data=slim_1871_noRD, subset=train_1871, scale=TRUE, validation="CV")
summary(pcr.fit.train)
validationplot(pcr.fit.train, val.type="MSEP")
# fit on full dataset, get MSE
pcr.pred <- predict(pcr.fit.train, x[test_1871, ], ncomp=14)
mean((pcr.pred - y.test)^2)
# loading matrices
loadings(pcr.fit.full)[, 1:6]
abs(loadings(pcr.fit.full)[, 1:6]) > 0.45
loadings(pcr.fit.train)[, 1:6]
abs(loadings(pcr.fit.train)[, 1:6]) > 0.45

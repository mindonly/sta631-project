teams_1970$Wpct <- with(teams_1970, W / (W + L))
teams_1970$X1B <- with(teams_1970, H - (X2B + X3B + HR))
# train/test
train_1970 <- sample(1:nrow(teams_1970), nrow(teams_1970) * 0.6667)
test_1970 <- (-train_1970)
# response vectors
y_1871 = teams_1871$Wpct
y_1970 = teams_1970$Wpct
library(pls)
# BEGIN DATA INPUT #
#
# reproducibility
set.seed(42)
# Lahman's baseball databank
setwd("~/Dropbox/f2018/sta631/Project/baseballdatabank-master/core/")
# intentionally using base not 'readr' to input CSV; HBP and SF columns mis-handled by 'readr'
teams <- read.csv("Teams.csv")
# drop any winless teams: e.g. 1872 NAT & 1873 MAR
# keeping them in breaks lm(logWratio) call below
teams <- subset(teams, W != 0)
# SUBSET DATA SINCE 1970
teams_1970 <- subset(teams, yearID > 1969)[ , c(01, 04, 07, 09, 10, 15:41)]
# derive run-diff, win-pct, and singles (X1B) columns
teams_1970$RD <- with(teams_1970, R - RA)
teams_1970$Wpct <- with(teams_1970, W / (W + L))
teams_1970$X1B <- with(teams_1970, H - (X2B + X3B + HR))
# deriv on-base percent (OBP), slugging percent (SLG), and OPS (on-base + slugging)
# only possible for data since 1970 due to HBP and SF
teams_1970$OBP <- with(teams_1970, (H + BB + HBP) / (AB + BB + HBP +SF) )
#teams_1970$SLG <- with(teams_1970, ( (H - (X2B + X3B + HR) + (2*X2B) + (3*X3B) + (4*HR)) ) / AB)
teams_1970$SLG <- with(teams_1970, (X1B + (2*X2B) + (3*X3B) + (4*HR)) / AB)
teams_1970$OPS <- with(teams_1970, OBP + SLG)
# train/test
train_1970 <- sample(1:nrow(teams_1970), nrow(teams_1970) * 0.6667)
test_1970 <- (-train_1970)
# PCR and PLS #
#
# drop non-predictors
# subset select option, by row below:
# 1. derived: run-diff, win-pct
# 2. batting/scoring
# 3. pitching
# 4. fielding
# NOTE: SO, CS, SB removed due to lack of complete cases
# also removed R, RA, H, OPS, and IPouts
# (with RD)
slim_1970 <- subset(teams_1970,
select = c(RD, Wpct,
AB, X1B, X2B, X3B, HR, BB, OBP, SLG,
ER, ERA, CG, SHO, SV, HA, HRA, BBA, SOA,
E, DP, FP))
# (without RD)
slim_1970_noRD <- subset(teams_1970,
select = c(Wpct,
AB, X1B, X2B, X3B, HR, BB, OBP, SLG,
ER, ERA, CG, SHO, SV, HA, HRA, BBA, SOA,
E, DP, FP))
# PCR
#
# 1970 PCR with RD #
# set up model matrix
x <- model.matrix(Wpct ~ ., slim_1970)[, -1]
y <- slim_1970$Wpct
y.test <- y[test_1970]
# full dataset
pcr.fit.full <- pcr(Wpct ~ ., data=slim_1970, scale=TRUE, validation="CV")
summary(pcr.fit.full)
validationplot(pcr.fit.full, val.type="MSEP")
# train/test
pcr.fit.train <- pcr(Wpct ~ ., data=slim_1970, subset=train_1970, scale=TRUE, validation="CV")
summary(pcr.fit.train)
validationplot(pcr.fit.train, val.type="MSEP")
# fit on full dataset, get RMSE
pcr.pred <- predict(pcr.fit.train, x[test_1970, ], ncomp=4)
sqrt(mean((pcr.pred - y.test)^2))
# loading matrices
loadings(pcr.fit.full)[, 1:6]
abs(loadings(pcr.fit.full)[, 1:6]) > 0.30
loadings(pcr.fit.train)[, 1:6]
abs(loadings(pcr.fit.train)[, 1:6]) > 0.30
summary(pcr.fit.full)
# loading matrices
loadings(pcr.fit.full)[, 1:6]
# 1970 PCR without RD
# set up model matrix (no RD)
x <- model.matrix(Wpct ~ ., slim_1970_noRD)[, -1]
y <- slim_1970_noRD$Wpct
y.test <- y[test_1970]
# full dataset
pcr.fit.full <- pcr(Wpct ~ ., data=slim_1970_noRD, scale=TRUE, validation="CV")
summary(pcr.fit.full)
validationplot(pcr.fit.full, val.type="MSEP")
# train/test
pcr.fit.train <- pcr(Wpct ~ ., data=slim_1970_noRD, subset=train_1970, scale=TRUE, validation="CV")
summary(pcr.fit.train)
validationplot(pcr.fit.train, val.type="MSEP")
# fit on full dataset, get MSE
pcr.pred <- predict(pcr.fit.train, x[test_1970, ], ncomp=4)
sqrt(mean((pcr.pred - y.test)^2))
# loading matrices
loadings(pcr.fit.full)[, 1:6]
abs(loadings(pcr.fit.full)[, 1:6]) > 0.30
loadings(pcr.fit.train)[, 1:6]
abs(loadings(pcr.fit.train)[, 1:6]) > 0.30
summary(pcr.fit.full)
# loading matrices
loadings(pcr.fit.full)[, 1:6]
source('~/Dropbox/f2018/sta631/Project/src/teams_PCR_PLS.R')
summary(pcr.fit.full)
# loading matrices
loadings(pcr.fit.full)[, 1:6]
summary(pcr.fit.full.noRD)
# loading matrices
loadings(pcr.fit.full.noRD)[, 1:6]
summary(pls.fit.full)
# loading matrices
loadings(pls.fit.full)[, 1:6]
summary(pls.fit.full.noRD)
# loading matrices
loadings(pls.fit.full.noRD)[, 1:6]
install.packages(c("Rfit", "npsm"))
seq(2, 20, 2)
seq(101, 203, 2)
rep(1)
rep(1, 3)
rep(c(1,3), 4)
rep(1, 4)
rep(3, 4)
c(rep(1,4), rep(3,4))
mean(seq(1, 100))
mean(seq(0, 99))
var(seq(1, 100))
sqrt(var(seq(1, 100)))
rnorm(50, 30, 5)
mean(rnorm(50, 30, 5))
var(rnorm(50, 30, 5))
library("knitr", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
source('~/Dropbox/f2018/sta631/Project/src/sta631_project.R')
twofit("CHC", "STL")
source('~/Dropbox/f2018/sta631/Project/src/sta631_project.R')
# create fit plots
# AL
# twofit("BOS", "NYY")
# twofit("BAL", "TBD")
# twofit("TOR", "MIN")
# twofit("CHW", "CLE")
twofit("DET", "KCR")
twofit("CHC", "STL")
citation()
source('~/Dropbox/f2018/sta631/Project/src/teams_PCR_PLS.R')
library(pls)
# BEGIN DATA INPUT #
#
# reproducibility
set.seed(42)
# Lahman's baseball databank
setwd("~/Dropbox/f2018/sta631/Project/baseballdatabank-master/core/")
# intentionally using base not 'readr' to input CSV; HBP and SF columns mis-handled by 'readr'
teams <- read.csv("Teams.csv")
# drop any winless teams: e.g. 1872 NAT & 1873 MAR
# keeping them in breaks lm(logWratio) call below
teams <- subset(teams, W != 0)
# SUBSET DATA SINCE 1970
teams_1970 <- subset(teams, yearID > 1969)[ , c(01, 04, 07, 09, 10, 15:41)]
# derive run-diff, win-pct, and singles (X1B) columns
teams_1970$RD <- with(teams_1970, R - RA)
teams_1970$Wpct <- with(teams_1970, W / (W + L))
teams_1970$X1B <- with(teams_1970, H - (X2B + X3B + HR))
# deriv on-base percent (OBP), slugging percent (SLG), and OPS (on-base + slugging)
# only possible for data since 1970 due to HBP and SF
teams_1970$OBP <- with(teams_1970, (H + BB + HBP) / (AB + BB + HBP +SF) )
#teams_1970$SLG <- with(teams_1970, ( (H - (X2B + X3B + HR) + (2*X2B) + (3*X3B) + (4*HR)) ) / AB)
teams_1970$SLG <- with(teams_1970, (X1B + (2*X2B) + (3*X3B) + (4*HR)) / AB)
teams_1970$OPS <- with(teams_1970, OBP + SLG)
# train/test
train_1970 <- sample(1:nrow(teams_1970), nrow(teams_1970) * 0.6667)
test_1970 <- (-train_1970)
#
# END DATA INPUT #
# (with RD)
slim_1970 <- subset(teams_1970,
select = c(RD, Wpct,
AB, X1B, X2B, X3B, HR, SF, BB, HBP, SO, SB, CS, OBP, SLG,
ER, ERA, CG, SHO, SV, HA, HRA, BBA, SOA, IPouts,
E, DP, FP))
# (without RD)
slim_1970_noRD <- subset(teams_1970,
select = c(Wpct,
AB, X1B, X2B, X3B, HR, SF, BB, HBP, SO, SB, CS, OBP, SLG,
ER, ERA, CG, SHO, SV, HA, HRA, BBA, SOA, IPouts,
E, DP, FP))
# PCR
#
# 1970 PCR with RD #
# set up model matrix
x <- model.matrix(Wpct ~ ., slim_1970)[, -1]
y <- slim_1970$Wpct
y.test <- y[test_1970]
# full dataset
pcr.fit.full <- pcr(Wpct ~ ., data=slim_1970, scale=TRUE, validation="CV")
summary(pcr.fit.full)
validationplot(pcr.fit.full, val.type="MSEP")
# train/test
pcr.fit.train <- pcr(Wpct ~ ., data=slim_1970, subset=train_1970, scale=TRUE, validation="CV")
summary(pcr.fit.train)
validationplot(pcr.fit.train, val.type="MSEP")
# fit on full dataset, get RMSE
pcr.pred <- predict(pcr.fit.train, x[test_1970, ], ncomp=5)
sqrt(mean((pcr.pred - y.test)^2))
# loading matrices
loadings(pcr.fit.full)[, 1:6]
abs(loadings(pcr.fit.full)[, 1:6]) > 0.30
loadings(pcr.fit.train)[, 1:6]
abs(loadings(pcr.fit.train)[, 1:6]) > 0.30
# loading matrices
loadings(pcr.fit.full)[, 1:6]
# loading matrices
loadings(pcr.fit.full)[, 1:9]
# loading matrices
loadings(pcr.fit.full)[, 1:9]
loadings(pcr.fit.train)[, 1:9]
# loading matrices
loadings(pcr.fit.full)[, 1:9]
abs(loadings(pcr.fit.full)[, 1:9]) > 0.30
loadings(pcr.fit.train)[, 1:9]
abs(loadings(pcr.fit.train)[, 1:9]) > 0.30
library(pls)
# BEGIN DATA INPUT #
#
# reproducibility
set.seed(42)
# Lahman's baseball databank
setwd("~/Dropbox/f2018/sta631/Project/baseballdatabank-master/core/")
# intentionally using base not 'readr' to input CSV; HBP and SF columns mis-handled by 'readr'
teams <- read.csv("Teams.csv")
# drop any winless teams: e.g. 1872 NAT & 1873 MAR
# keeping them in breaks lm(logWratio) call below
teams <- subset(teams, W != 0)
# SUBSET DATA SINCE 1970
teams_1970 <- subset(teams, yearID > 1969)[ , c(01, 04, 07, 09, 10, 15:41)]
# derive run-diff, win-pct, and singles (X1B) columns
teams_1970$RD <- with(teams_1970, R - RA)
teams_1970$Wpct <- with(teams_1970, W / (W + L))
teams_1970$X1B <- with(teams_1970, H - (X2B + X3B + HR))
# deriv on-base percent (OBP), slugging percent (SLG), and OPS (on-base + slugging)
# only possible for data since 1970 due to HBP and SF
teams_1970$OBP <- with(teams_1970, (H + BB + HBP) / (AB + BB + HBP +SF) )
#teams_1970$SLG <- with(teams_1970, ( (H - (X2B + X3B + HR) + (2*X2B) + (3*X3B) + (4*HR)) ) / AB)
teams_1970$SLG <- with(teams_1970, (X1B + (2*X2B) + (3*X3B) + (4*HR)) / AB)
teams_1970$OPS <- with(teams_1970, OBP + SLG)
# train/test
train_1970 <- sample(1:nrow(teams_1970), nrow(teams_1970) * 0.6667)
test_1970 <- (-train_1970)
#
# END DATA INPUT #
# (with RD)
slim_1970 <- subset(teams_1970,
select = c(RD, Wpct,
AB, X1B, X2B, X3B, HR, SF, BB, HBP, SO, SB, CS, OBP, SLG,
ER, ERA, CG, SHO, SV, HA, HRA, BBA, SOA, IPouts,
E, DP, FP))
# (without RD)
slim_1970_noRD <- subset(teams_1970,
select = c(Wpct,
AB, X1B, X2B, X3B, HR, SF, BB, HBP, SO, SB, CS, OBP, SLG,
ER, ERA, CG, SHO, SV, HA, HRA, BBA, SOA, IPouts,
E, DP, FP))
# PCR
#
# 1970 PCR with RD #
# set up model matrix
x <- model.matrix(Wpct ~ ., slim_1970)[, -1]
y <- slim_1970$Wpct
y.test <- y[test_1970]
# full dataset
pcr.fit.full <- pcr(Wpct ~ ., data=slim_1970, scale=TRUE, validation="CV")
summary(pcr.fit.full)
validationplot(pcr.fit.full, val.type="MSEP")
# train/test
pcr.fit.train <- pcr(Wpct ~ ., data=slim_1970, subset=train_1970, scale=TRUE, validation="CV")
summary(pcr.fit.train)
validationplot(pcr.fit.train, val.type="MSEP")
# fit on full dataset, get RMSE
pcr.pred <- predict(pcr.fit.train, x[test_1970, ], ncomp=5)
sqrt(mean((pcr.pred - y.test)^2))
# loading matrices
loadings(pcr.fit.full)[, 1:9]
abs(loadings(pcr.fit.full)[, 1:9]) > 0.30
loadings(pcr.fit.train)[, 1:9]
# loading matrices
loadings(pcr.fit.full)[, 1:9]
# PLS
#
# 1970 PLS with RD #
# set up model matrix
x <- model.matrix(Wpct ~ ., slim_1970)[, -1]
y <- slim_1970$Wpct
y.test <- y[test_1970]
# full dataset
pls.fit.full <- plsr(Wpct ~ ., data=slim_1970, scale=TRUE, validation="CV")
summary(pls.fit.full)
validationplot(pls.fit.full, val.type="MSEP")
# train/test
pls.fit.train <- plsr(Wpct ~ ., data=slim_1970, subset=train_1970, scale=TRUE, validation="CV")
summary(pls.fit.train)
summary(pcr.fit.full)
# PCR
#
# 1970 PCR with RD #
# set up model matrix
x <- model.matrix(Wpct ~ ., slim_1970)[, -1]
y <- slim_1970$Wpct
y.test <- y[test_1970]
# full dataset
pcr.fit.full <- pcr(Wpct ~ ., data=slim_1970, scale=TRUE, validation="CV")
summary(pcr.fit.full)
# PLS
#
# 1970 PLS with RD #
# set up model matrix
x <- model.matrix(Wpct ~ ., slim_1970)[, -1]
y <- slim_1970$Wpct
y.test <- y[test_1970]
# full dataset
pls.fit.full <- plsr(Wpct ~ ., data=slim_1970, scale=TRUE, validation="CV")
summary(pls.fit.full)
# train/test
pls.fit.train <- plsr(Wpct ~ ., data=slim_1970, subset=train_1970, scale=TRUE, validation="CV")
summary(pls.fit.train)
validationplot(pls.fit.train, val.type="MSEP")
# fit on full dataset, get RMSE
pls.pred <- predict(pls.fit.train, x[test_1970, ], ncomp=2)
sqrt(mean((pls.pred - y.test)^2))
# loading matrices
loadings(pls.fit.full)[, 1:6]
# fit on full dataset, get RMSE
pls.pred <- predict(pls.fit.train, x[test_1970, ], ncomp=2)
sqrt(mean((pls.pred - y.test)^2))
# loading matrices
loadings(pls.fit.full)[, 1:9]
library(pls)
# BEGIN DATA INPUT #
#
# reproducibility
set.seed(42)
# Lahman's baseball databank
setwd("~/Dropbox/f2018/sta631/Project/baseballdatabank-master/core/")
# intentionally using base not 'readr' to input CSV; HBP and SF columns mis-handled by 'readr'
teams <- read.csv("Teams.csv")
# drop any winless teams: e.g. 1872 NAT & 1873 MAR
# keeping them in breaks lm(logWratio) call below
teams <- subset(teams, W != 0)
# SUBSET DATA SINCE 1970
teams_1970 <- subset(teams, yearID > 1969)[ , c(01, 04, 07, 09, 10, 15:41)]
# derive run-diff, win-pct, and singles (X1B) columns
teams_1970$RD <- with(teams_1970, R - RA)
teams_1970$Wpct <- with(teams_1970, W / (W + L))
teams_1970$X1B <- with(teams_1970, H - (X2B + X3B + HR))
# deriv on-base percent (OBP), slugging percent (SLG), and OPS (on-base + slugging)
# only possible for data since 1970 due to HBP and SF
teams_1970$OBP <- with(teams_1970, (H + BB + HBP) / (AB + BB + HBP +SF) )
#teams_1970$SLG <- with(teams_1970, ( (H - (X2B + X3B + HR) + (2*X2B) + (3*X3B) + (4*HR)) ) / AB)
teams_1970$SLG <- with(teams_1970, (X1B + (2*X2B) + (3*X3B) + (4*HR)) / AB)
teams_1970$OPS <- with(teams_1970, OBP + SLG)
# train/test
train_1970 <- sample(1:nrow(teams_1970), nrow(teams_1970) * 0.6667)
test_1970 <- (-train_1970)
#
# END DATA INPUT #
# (with RD)
slim_1970 <- subset(teams_1970,
select = c(RD, Wpct,
AB, X1B, X2B, X3B, HR, SF, BB, HBP, SO, SB, CS, OBP, SLG,
ER, ERA, CG, SHO, SV, HA, HRA, BBA, SOA, IPouts,
E, DP, FP))
# (without RD)
slim_1970_noRD <- subset(teams_1970,
select = c(Wpct,
AB, X1B, X2B, X3B, HR, SF, BB, HBP, SO, SB, CS, OBP, SLG,
ER, ERA, CG, SHO, SV, HA, HRA, BBA, SOA, IPouts,
E, DP, FP))
# PCR
#
# 1970 PCR with RD #
# set up model matrix
x <- model.matrix(Wpct ~ ., slim_1970)[, -1]
y <- slim_1970$Wpct
y.test <- y[test_1970]
# full dataset
pcr.fit.full <- pcr(Wpct ~ ., data=slim_1970, scale=TRUE, validation="CV")
summary(pcr.fit.full)
validationplot(pcr.fit.full, val.type="MSEP")
# train/test
pcr.fit.train <- pcr(Wpct ~ ., data=slim_1970, subset=train_1970, scale=TRUE, validation="CV")
summary(pcr.fit.train)
validationplot(pcr.fit.train, val.type="MSEP")
# fit on full dataset, get RMSE
pcr.pred <- predict(pcr.fit.train, x[test_1970, ], ncomp=5)
sqrt(mean((pcr.pred - y.test)^2))
# loading matrices
loadings(pcr.fit.full)[, 1:9]
abs(loadings(pcr.fit.full)[, 1:9]) > 0.30
loadings(pcr.fit.train)[, 1:9]
abs(loadings(pcr.fit.train)[, 1:9]) > 0.30
# fit on full dataset, get RMSE
pcr.pred <- predict(pcr.fit.train, x[test_1970, ], ncomp=9)
sqrt(mean((pcr.pred - y.test)^2))
# loading matrices
loadings(pcr.fit.full)[, 1:9]
abs(loadings(pcr.fit.full)[, 1:9]) > 0.30
loadings(pcr.fit.train)[, 1:9]
abs(loadings(pcr.fit.train)[, 1:9]) > 0.30
# loading matrices
loadings(pcr.fit.full.noRD)[, 1:6]
abs(loadings(pcr.fit.full.noRD)[, 1:6]) > 0.30
loadings(pcr.fit.train.noRD)[, 1:6]
# PCR
#
# 1970 PCR with RD #
# set up model matrix
x <- model.matrix(Wpct ~ ., slim_1970)[, -1]
y <- slim_1970$Wpct
y.test <- y[test_1970]
# full dataset
pcr.fit.full <- pcr(Wpct ~ ., data=slim_1970, scale=TRUE, validation="CV")
summary(pcr.fit.full)
validationplot(pcr.fit.full, val.type="MSEP")
# train/test
pcr.fit.train <- pcr(Wpct ~ ., data=slim_1970, subset=train_1970, scale=TRUE, validation="CV")
summary(pcr.fit.train)
validationplot(pcr.fit.train, val.type="MSEP")
# fit on full dataset, get RMSE
pcr.pred <- predict(pcr.fit.train, x[test_1970, ], ncomp=9)
sqrt(mean((pcr.pred - y.test)^2))
# loading matrices
loadings(pcr.fit.full)[, 1:9]
abs(loadings(pcr.fit.full)[, 1:9]) > 0.30
loadings(pcr.fit.train)[, 1:9]
# PLS
#
# 1970 PLS with RD #
# set up model matrix
x <- model.matrix(Wpct ~ ., slim_1970)[, -1]
y <- slim_1970$Wpct
y.test <- y[test_1970]
# full dataset
pls.fit.full <- plsr(Wpct ~ ., data=slim_1970, scale=TRUE, validation="CV")
summary(pls.fit.full)
validationplot(pls.fit.full, val.type="MSEP")
summary(pls.fit.full)
validationplot(pls.fit.full, val.type="MSEP")
# train/test
pls.fit.train <- plsr(Wpct ~ ., data=slim_1970, subset=train_1970, scale=TRUE, validation="CV")
summary(pls.fit.train)
summary(pls.fit.full)
summary(pls.fit.train)
summary(pcr.fit.full)
summary(pcr.fit.train)
# PCR
#
# 1970 PCR with RD #
# set up model matrix
x <- model.matrix(Wpct ~ ., slim_1970)[, -1]
y <- slim_1970$Wpct
y.test <- y[test_1970]
# full dataset
pcr.fit.full <- pcr(Wpct ~ ., data=slim_1970, scale=TRUE, validation="CV")
summary(pcr.fit.full)
validationplot(pcr.fit.full, val.type="MSEP")
# train/test
pcr.fit.train <- pcr(Wpct ~ ., data=slim_1970, subset=train_1970, scale=TRUE, validation="CV")
summary(pcr.fit.train)
validationplot(pcr.fit.train, val.type="MSEP")
summary(pcr.fit.train)
summary(pcr.fit.train)
validationplot(pcr.fit.train, val.type="MSEP")
validationplot(pcr.fit.train, val.type="MSEP")
# fit on full dataset, get RMSE
pcr.pred <- predict(pcr.fit.train, x[test_1970, ], ncomp=7)
sqrt(mean((pcr.pred - y.test)^2))
# loading matrices
loadings(pcr.fit.full)[, 1:9]
abs(loadings(pcr.fit.full)[, 1:9]) > 0.30
loadings(pcr.fit.train)[, 1:9]
# PLS
#
# 1970 PLS with RD #
# set up model matrix
x <- model.matrix(Wpct ~ ., slim_1970)[, -1]
y <- slim_1970$Wpct
y.test <- y[test_1970]
# full dataset
pls.fit.full <- plsr(Wpct ~ ., data=slim_1970, scale=TRUE, validation="CV")
summary(pls.fit.full)
validationplot(pls.fit.full, val.type="MSEP")
# train/test
pls.fit.train <- plsr(Wpct ~ ., data=slim_1970, subset=train_1970, scale=TRUE, validation="CV")
summary(pls.fit.train)
validationplot(pls.fit.train, val.type="MSEP")
# fit on full dataset, get RMSE
pls.pred <- predict(pls.fit.train, x[test_1970, ], ncomp=2)
sqrt(mean((pls.pred - y.test)^2))
# loading matrices
loadings(pls.fit.full)[, 1:9]
abs(loadings(pls.fit.full)[, 1:9]) > 0.35
loadings(pls.fit.train)[, 1:9]
loadings(pls.fit.train)[, 1:9]
validationplot(pcr.fit.train, val.type="MSEP", main="PCR with RD")
validationplot(pls.fit.train, val.type="MSEP", main="PLS with RD")
loadings(pls.fit.train.noRD)[, 1:6]
loadings(pls.fit.train)[, 1:9]
A = c(1,2,3)
